/* prettier-ignore-start */

/* eslint-disable */

// @ts-nocheck

// noinspection JSUnusedGlobalSymbols

// This file is auto-generated by TanStack Router

import { createFileRoute } from '@tanstack/react-router'

// Import Routes

import { Route as rootRoute } from './routes/__root'
import { Route as AuthImport } from './routes/_auth'
import { Route as ProductsIndexImport } from './routes/products/index'
import { Route as PostsIndexImport } from './routes/posts/index'
import { Route as AuthUsersIndexImport } from './routes/_auth/users/index'

// Create Virtual Routes

const IndexLazyImport = createFileRoute('/')()
const AuthIndexLazyImport = createFileRoute('/auth/')()
const ProductsProductIdLazyImport = createFileRoute('/products/$productId')()
const PostsPostIdLazyImport = createFileRoute('/posts/$postId')()
const AuthRegisterLazyImport = createFileRoute('/auth/register')()
const AuthLoginLazyImport = createFileRoute('/auth/login')()
const AuthProfileLazyImport = createFileRoute('/_auth/profile')()
const AuthCheckoutLazyImport = createFileRoute('/_auth/checkout')()
const AuthBillingLazyImport = createFileRoute('/_auth/billing')()
const ProductsCategoryIndexLazyImport = createFileRoute('/products/category/')()
const ProductsCategoryCategorySlugLazyImport = createFileRoute(
  '/products/category/$categorySlug',
)()
const AuthUsersUserIdLazyImport = createFileRoute('/_auth/users/$userId')()

// Create/Update Routes

const AuthRoute = AuthImport.update({
  id: '/_auth',
  getParentRoute: () => rootRoute,
} as any)

const IndexLazyRoute = IndexLazyImport.update({
  path: '/',
  getParentRoute: () => rootRoute,
} as any).lazy(() => import('./routes/index.lazy').then((d) => d.Route))

const AuthIndexLazyRoute = AuthIndexLazyImport.update({
  path: '/auth/',
  getParentRoute: () => rootRoute,
} as any).lazy(() => import('./routes/auth/index.lazy').then((d) => d.Route))

const ProductsIndexRoute = ProductsIndexImport.update({
  path: '/products/',
  getParentRoute: () => rootRoute,
} as any)

const PostsIndexRoute = PostsIndexImport.update({
  path: '/posts/',
  getParentRoute: () => rootRoute,
} as any)

const ProductsProductIdLazyRoute = ProductsProductIdLazyImport.update({
  path: '/products/$productId',
  getParentRoute: () => rootRoute,
} as any).lazy(() =>
  import('./routes/products/$productId.lazy').then((d) => d.Route),
)

const PostsPostIdLazyRoute = PostsPostIdLazyImport.update({
  path: '/posts/$postId',
  getParentRoute: () => rootRoute,
} as any).lazy(() => import('./routes/posts/$postId.lazy').then((d) => d.Route))

const AuthRegisterLazyRoute = AuthRegisterLazyImport.update({
  path: '/auth/register',
  getParentRoute: () => rootRoute,
} as any).lazy(() => import('./routes/auth/register.lazy').then((d) => d.Route))

const AuthLoginLazyRoute = AuthLoginLazyImport.update({
  path: '/auth/login',
  getParentRoute: () => rootRoute,
} as any).lazy(() => import('./routes/auth/login.lazy').then((d) => d.Route))

const AuthProfileLazyRoute = AuthProfileLazyImport.update({
  path: '/profile',
  getParentRoute: () => AuthRoute,
} as any).lazy(() => import('./routes/_auth/profile.lazy').then((d) => d.Route))

const AuthCheckoutLazyRoute = AuthCheckoutLazyImport.update({
  path: '/checkout',
  getParentRoute: () => AuthRoute,
} as any).lazy(() =>
  import('./routes/_auth/checkout.lazy').then((d) => d.Route),
)

const AuthBillingLazyRoute = AuthBillingLazyImport.update({
  path: '/billing',
  getParentRoute: () => AuthRoute,
} as any).lazy(() => import('./routes/_auth/billing.lazy').then((d) => d.Route))

const ProductsCategoryIndexLazyRoute = ProductsCategoryIndexLazyImport.update({
  path: '/products/category/',
  getParentRoute: () => rootRoute,
} as any).lazy(() =>
  import('./routes/products/category/index.lazy').then((d) => d.Route),
)

const AuthUsersIndexRoute = AuthUsersIndexImport.update({
  path: '/users/',
  getParentRoute: () => AuthRoute,
} as any)

const ProductsCategoryCategorySlugLazyRoute =
  ProductsCategoryCategorySlugLazyImport.update({
    path: '/products/category/$categorySlug',
    getParentRoute: () => rootRoute,
  } as any).lazy(() =>
    import('./routes/products/category/$categorySlug.lazy').then(
      (d) => d.Route,
    ),
  )

const AuthUsersUserIdLazyRoute = AuthUsersUserIdLazyImport.update({
  path: '/users/$userId',
  getParentRoute: () => AuthRoute,
} as any).lazy(() =>
  import('./routes/_auth/users/$userId.lazy').then((d) => d.Route),
)

// Populate the FileRoutesByPath interface

declare module '@tanstack/react-router' {
  interface FileRoutesByPath {
    '/': {
      id: '/'
      path: '/'
      fullPath: '/'
      preLoaderRoute: typeof IndexLazyImport
      parentRoute: typeof rootRoute
    }
    '/_auth': {
      id: '/_auth'
      path: ''
      fullPath: ''
      preLoaderRoute: typeof AuthImport
      parentRoute: typeof rootRoute
    }
    '/_auth/billing': {
      id: '/_auth/billing'
      path: '/billing'
      fullPath: '/billing'
      preLoaderRoute: typeof AuthBillingLazyImport
      parentRoute: typeof AuthImport
    }
    '/_auth/checkout': {
      id: '/_auth/checkout'
      path: '/checkout'
      fullPath: '/checkout'
      preLoaderRoute: typeof AuthCheckoutLazyImport
      parentRoute: typeof AuthImport
    }
    '/_auth/profile': {
      id: '/_auth/profile'
      path: '/profile'
      fullPath: '/profile'
      preLoaderRoute: typeof AuthProfileLazyImport
      parentRoute: typeof AuthImport
    }
    '/auth/login': {
      id: '/auth/login'
      path: '/auth/login'
      fullPath: '/auth/login'
      preLoaderRoute: typeof AuthLoginLazyImport
      parentRoute: typeof rootRoute
    }
    '/auth/register': {
      id: '/auth/register'
      path: '/auth/register'
      fullPath: '/auth/register'
      preLoaderRoute: typeof AuthRegisterLazyImport
      parentRoute: typeof rootRoute
    }
    '/posts/$postId': {
      id: '/posts/$postId'
      path: '/posts/$postId'
      fullPath: '/posts/$postId'
      preLoaderRoute: typeof PostsPostIdLazyImport
      parentRoute: typeof rootRoute
    }
    '/products/$productId': {
      id: '/products/$productId'
      path: '/products/$productId'
      fullPath: '/products/$productId'
      preLoaderRoute: typeof ProductsProductIdLazyImport
      parentRoute: typeof rootRoute
    }
    '/posts/': {
      id: '/posts/'
      path: '/posts'
      fullPath: '/posts'
      preLoaderRoute: typeof PostsIndexImport
      parentRoute: typeof rootRoute
    }
    '/products/': {
      id: '/products/'
      path: '/products'
      fullPath: '/products'
      preLoaderRoute: typeof ProductsIndexImport
      parentRoute: typeof rootRoute
    }
    '/auth/': {
      id: '/auth/'
      path: '/auth'
      fullPath: '/auth'
      preLoaderRoute: typeof AuthIndexLazyImport
      parentRoute: typeof rootRoute
    }
    '/_auth/users/$userId': {
      id: '/_auth/users/$userId'
      path: '/users/$userId'
      fullPath: '/users/$userId'
      preLoaderRoute: typeof AuthUsersUserIdLazyImport
      parentRoute: typeof AuthImport
    }
    '/products/category/$categorySlug': {
      id: '/products/category/$categorySlug'
      path: '/products/category/$categorySlug'
      fullPath: '/products/category/$categorySlug'
      preLoaderRoute: typeof ProductsCategoryCategorySlugLazyImport
      parentRoute: typeof rootRoute
    }
    '/_auth/users/': {
      id: '/_auth/users/'
      path: '/users'
      fullPath: '/users'
      preLoaderRoute: typeof AuthUsersIndexImport
      parentRoute: typeof AuthImport
    }
    '/products/category/': {
      id: '/products/category/'
      path: '/products/category'
      fullPath: '/products/category'
      preLoaderRoute: typeof ProductsCategoryIndexLazyImport
      parentRoute: typeof rootRoute
    }
  }
}

// Create and export the route tree

export const routeTree = rootRoute.addChildren({
  IndexLazyRoute,
  AuthRoute: AuthRoute.addChildren({
    AuthBillingLazyRoute,
    AuthCheckoutLazyRoute,
    AuthProfileLazyRoute,
    AuthUsersUserIdLazyRoute,
    AuthUsersIndexRoute,
  }),
  AuthLoginLazyRoute,
  AuthRegisterLazyRoute,
  PostsPostIdLazyRoute,
  ProductsProductIdLazyRoute,
  PostsIndexRoute,
  ProductsIndexRoute,
  AuthIndexLazyRoute,
  ProductsCategoryCategorySlugLazyRoute,
  ProductsCategoryIndexLazyRoute,
})

/* prettier-ignore-end */

/* ROUTE_MANIFEST_START
{
  "routes": {
    "__root__": {
      "filePath": "__root.tsx",
      "children": [
        "/",
        "/_auth",
        "/auth/login",
        "/auth/register",
        "/posts/$postId",
        "/products/$productId",
        "/posts/",
        "/products/",
        "/auth/",
        "/products/category/$categorySlug",
        "/products/category/"
      ]
    },
    "/": {
      "filePath": "index.lazy.tsx"
    },
    "/_auth": {
      "filePath": "_auth.tsx",
      "children": [
        "/_auth/billing",
        "/_auth/checkout",
        "/_auth/profile",
        "/_auth/users/$userId",
        "/_auth/users/"
      ]
    },
    "/_auth/billing": {
      "filePath": "_auth/billing.lazy.tsx",
      "parent": "/_auth"
    },
    "/_auth/checkout": {
      "filePath": "_auth/checkout.lazy.tsx",
      "parent": "/_auth"
    },
    "/_auth/profile": {
      "filePath": "_auth/profile.lazy.tsx",
      "parent": "/_auth"
    },
    "/auth/login": {
      "filePath": "auth/login.lazy.tsx"
    },
    "/auth/register": {
      "filePath": "auth/register.lazy.tsx"
    },
    "/posts/$postId": {
      "filePath": "posts/$postId.lazy.tsx"
    },
    "/products/$productId": {
      "filePath": "products/$productId.lazy.tsx"
    },
    "/posts/": {
      "filePath": "posts/index.tsx"
    },
    "/products/": {
      "filePath": "products/index.tsx"
    },
    "/auth/": {
      "filePath": "auth/index.lazy.tsx"
    },
    "/_auth/users/$userId": {
      "filePath": "_auth/users/$userId.lazy.tsx",
      "parent": "/_auth"
    },
    "/products/category/$categorySlug": {
      "filePath": "products/category/$categorySlug.lazy.tsx"
    },
    "/_auth/users/": {
      "filePath": "_auth/users/index.tsx",
      "parent": "/_auth"
    },
    "/products/category/": {
      "filePath": "products/category/index.lazy.tsx"
    }
  }
}
ROUTE_MANIFEST_END */
